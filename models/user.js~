// user.js
// User model logic.

var dbconn = require('../routes/dbconn');
var neo4j = dbconn.neo4j;
var db = dbconn.db;
var dbApi = require('./DBApi');

// constants:

var INDEX_NAME = 'node_auto_index';
var INDEX_KEY = 'type';
var INDEX_VAL = 'user';
var INDEX_ITEM_VAL = 'item';

var FRIEND_REL = 'FRIEND';
var ITEM_REL = 'HAS_ITEM';

// private constructor:

var User = module.exports = function User(_node) {
    // all we'll really store is the node; the rest of our properties will be
    // derivable or just pass-through properties (see below).
    this._node = _node;
}

// public instance properties:

Object.defineProperty(User.prototype, 'id', {
    get: function () { return this._node.id; }
});

Object.defineProperty(User.prototype, 'exists', {
    get: function () { return this._node.exists; }
});

Object.defineProperty(User.prototype, 'name', {
    get: function () {
        return this._node.data['name'];
    },
    set: function (name) {
        this._node.data['name'] = name;
    }
});

// private instance methods:

User.prototype._getFriendRel = function (other, callback) {
    var query = [
        'START user=node({userId}), other=node({otherId})',
        'MATCH (user) -[rel?:FRIEND_REL]-> (other)',
        'RETURN rel'
    ].join('\n')
        .replace('FRIEND_REL', FRIEND_REL);

    var params = {
        userId: this.id,
        otherId: other.id,
    };

    db.query(query, params, function (err, results) {
        if (err) return callback(err);
        var rel = results[0] && results[0]['rel'];
        callback(null, rel);
    });
};

// public instance methods:

User.prototype.save = function (callback) {
    this._node.save(function (err) {
        callback(err);
    });
};

User.prototype.del = function (callback) {
    this._node.del(function (err) {
        callback(err);
    }, true);   // true = yes, force it (delete all relationships)
};

User.prototype.friend = function (other, callback) {
    this._node.createRelationshipTo(other._node, 'FRIEND', {}, function (err, rel) {
        callback(err);
    });
};

User.prototype.unfriend = function (other, callback) {
    this._getFriendRel(other, function (err, rel) {
        if (err) return callback(err);
        if (!rel) return callback(null);
        rel.del(function (err) {
            callback(err);
        });
    });
};

User.prototype.additem = function (other, callback) {
    this._node.createRelationshipTo(other._node, 'HAS_ITEM', {}, function (err, rel) {
        callback(err);
    });
};

User.prototype.rmitem = function (other, callback) {
    this._getFriendRel(other, function (err, rel) {
        if (err) return callback(err);
        if (!rel) return callback(null);
        rel.del(function (err) {
            callback(err);
        });
    });
};

// calls callback w/ (err, friends, others) where friends is an array of
// users friend of this user, and others is all other users minus him/herself.
User.prototype.getUserSN = function (callback) {
    // query all users and whether are friends or not:
    var query_friends = [
        'START user=node({userId}), other=node:INDEX_NAME(INDEX_KEY="INDEX_VAL")',
        'MATCH (user) -[rel?:FRIEND_REL]-> (other)',
        'RETURN other, COUNT(rel)'  // COUNT(rel) is a hack for 1 or 0
    ].join('\n')
        .replace('INDEX_NAME', INDEX_NAME)
        .replace('INDEX_KEY', INDEX_KEY)
        .replace('INDEX_VAL', INDEX_VAL)
        .replace('FRIEND_REL', FRIEND_REL);

    var query_items = [
        'START user=node({userId}), item=node:INDEX_NAME(INDEX_KEY="INDEX_ITEM_VAL")',
	'MATCH (user) -[rel?:ITEM_REL]-> (item)',
        'RETURN other, COUNT(rel)'  // COUNT(rel) is a hack for 1 or 0
    ].join('\n')
        .replace('INDEX_NAME', INDEX_NAME)
        .replace('INDEX_KEY', INDEX_KEY)
        .replace('INDEX_ITEM_VAL', INDEX_ITEM_VAL)
        .replace('ITEM_REL', ITEM_REL);

    var params = {
        userId: this.id,
    };

    var user = this;
    db.query(query_friends, params, function (err, results) {
        if (err) return callback(err);

        var friends = [];
        var others = [];

        for (var i = 0; i < results.length; i++) {
            var other = new User(results[i]['other']);
            var isFriend = results[i]['COUNT(rel)'];

            if (user.id === other.id) {
                continue;
            } else if (isFriend) {
                friends.push(other);
            } else {
                others.push(other);
            }
        }
	db.query(query_items, params, function (err, results) {
	        if (err) return callback(err);

	        var items = [];
	        var other_items = [];
        	for (var i = 0; i < results.length; i++) {
	            var other = new User(results[i]['other']);
	            var hasItem = results[i]['COUNT(rel)'];
	
	            if (hasItem) {
	                items.push(other);
	            } else {
	                other_items.push(other);
	            }
        	}

	        callback(null, friends, others, items, other_items);
	});
    });
};

// static methods:


User.get = function (id, callback) {
	dbApi.getObj('./user',id,callback);
};

User.getAll = function (callback) {
	dbApi.getAllObj('./user',INDEX_NAME, INDEX_KEY, INDEX_VAL,callback);
};

// creates the user and persists (saves) it to the db
User.create = function (data, callback) {
        data.type = 'user';
	dbApi.create('./user',data,callback);
};
